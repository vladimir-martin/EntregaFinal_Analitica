# -*- coding: utf-8 -*-
"""Entrega 2 Vladimir,Dayan,Alejandro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z_6fchZXq-HEVh4MY4JhQApda0nKLXvM

#**ENTREGA 2**

Dayan Marin, Alejandro Valencia y Vladimir Martin

Se realiza analisis exploratorio, transformaciones, tratamientos y visualizaciones, algunos analisis y bodegas de datos habian sido generados en el seguimiento 4.
"""

#importar librerias
import pandas as pd
import numpy as np
import plotly.express as px
from plotly.subplots import make_subplots

#generar conexion con collab
from google.colab import drive
drive.mount('/content/drive')

"""# **CARGA DE DATOS**
Link de carpeta en DRIVE con las bases de datos
https://drive.google.com/drive/folders/1tfr8gQC-TNwnYSoD5a3QUBPY0z7Nz1Uj?usp=sharing
"""

#se cargan las bases de datos, para algunas se hace necesario especificar el separador y el encoding.
rnt = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/Registro_Nacional_de_Turismo_-_RNT_2.csv')
arpro = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/areas_protegidas_1.csv', sep = ';')
teatro = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/teatrosyauditorios_3.csv',encoding='latin-1',sep=";")
museos = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/museos_5.csv',encoding='latin-1',sep=";")
centros = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/centrosculturalesartisticos_7.csv',encoding='latin-1',sep=";")
salacine = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/salascinecinematecas_6.csv',encoding='latin-1',sep=";")
salaexpo = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/salasexposiciongalerias_4.csv',encoding='latin-1',sep=";")

"""#**DEPURACIÓN: HOMOLOGACION, TIPOS DE DATOS**

## RNT
"""

#Caracteristicas globales del DataFrame
print("Numero de filas:",rnt.shape[0],"\n")
print("Numero de columnas:",rnt.shape[1],"\n")
print("Nombres de las columnas: ",rnt.columns,"\n")
print("Numero de registros: ",rnt.size,"\n")
print(rnt.info())

#formato de las categorias de fecha
print("Tipos de datos año: ","\n",type(rnt['ANO'][0]),"\n")#vemos que los datos de año no estan tipo fecha 
print("Tipos de datos mes: ","\n",type(rnt['MES'][0]),"\n")#vemos que los datos de mes no estan tipo fecha
#Cantidad de categorias por columna
print("Cantidad de categorias por columna","\n")
for i in range (rnt.shape[1]-1):
  print(rnt.columns.values[i]," : ",len(rnt.iloc[:,i].unique()))
rnt.head(3)

#cambiar formato a fecha
rnt["ANO"]=pd.to_datetime(rnt["ANO"],format='%Y')
rnt["MES"]=pd.to_datetime(rnt["MES"],format="%m")
print("Tipos de datos año: ","\n",type(rnt['ANO'][0]))
print("Tipos de datos mes: ","\n",type(rnt['MES'][0]))

#Exploracion de categorias municipios y cod_municipio, los valores no son iguales como con departamento y cod_departamento
pd.set_option('max_rows', None)
rnt[['MUNICIPIO','COD_MUN']]
rnt1=rnt.groupby(["DEPARTAMENTO","MUNICIPIO","COD_MUN"])[["CODIGO_RNT"]].count().reset_index().rename(columns={"CODIGO_RNT":"REGISTROS"}) 
#se ve de la exploracion que hay municipios con el mismo nombre, pero diferentes departamento por lo tanto diferente codigo,ejemplo con Rionegro.
rnt1[rnt1["MUNICIPIO"].str.contains("RIONEGRO")]

#descripcion general de variables no numericas
rnt.describe(include="all").iloc[:,5:11]

#descripcion general de variables numericas 
rnt.describe()

"""## AREAS PROTEGIDAS"""

#Caracteristicas globales del DataFrame
print("Numero de filas:",arpro.shape[0],"\n")
print("Numero de columnas:",arpro.shape[1],"\n")
print("Nombres de las columnas: ",arpro.columns,"\n")
print("Numero de registros: ",arpro.size,"\n")
print(arpro.info())
#muestra de la base de datos
arpro.head(3)

#descripcion general de variables no numericas
arpro.describe(include="all").iloc[:,0:2]

#de 99 registros, tenemos 78 nombres diferentes, nombres de zonas que se repiten
print("Nombres de zonas que se repiten \n ")
arpro["NOMBRE"].value_counts().head(16)
arpro1=arpro.groupby(["NOMBRE"])[["TIPO"]].count().rename(columns={"TIPO":"CANTIDAD"}).sort_values("CANTIDAD",ascending=False).reset_index()
arpro1[arpro1["CANTIDAD"]>1]

"""## CENTROS CULTURALES Y ARTISTICOS"""

#Caracteristicas globales del DataFrame
print("Numero de filas:",centros.shape[0],"\n")
print("Numero de columnas:",centros.shape[1],"\n")
print("Nombres de las columnas: ",centros.columns,"\n")
print("Numero de registros: ",centros.size,"\n")
print(centros.info())
centros.head(3)

#Cantidad de categorias por columna
print("Cantidad de categorias por columna")
for i in range (centros.shape[1]-1):
  print(centros.columns.values[i]," : ",len(centros.iloc[:,i].unique()))

#algunas columnas no aportan al analisis ya sea porque tienen una sola categoria o porque no son relevantes y seran eliminadas mas adelante

#descripcion general de variables no numericas, variables numericas no se analizan porque son codigos
centros.describe(include="all").iloc[:,[2,3,4,5,6,8,9,10,12,13,14,15,16]].iloc[0:4,:]

"""## MUSEOS"""

#Caracteristicas globales del DataFrame
print("Numero de filas:",museos.shape[0],"\n")
print("Numero de columnas:",museos.shape[1],"\n")
print("Nombres de las columnas: ",museos.columns,"\n")
print("Numero de registros: ",museos.size,"\n")
print(museos.info())

#Cantidad de categorias por columna
print("Cantidad de categorias por columna")
for i in range (museos.shape[1]-1):
  print(museos.columns.values[i]," : ",len(museos.iloc[:,i].unique()))

#descripcion general de variables no numericas, variables numericas no se analizan porque son codigos
museos.describe(include="all").iloc[:,[2,3,4,5,6,8,9,10,12,13,14,15,16]].iloc[0:4,:]
#algunas columnas no aportan al analisis ya sea poruqe tienen una sola categoria o porque no son relevantes y seran eliminadas mas adelante

"""## SALAS DE CINE Y CINEMATECAS"""

#Caracteristicas globales del DataFrame
print("Numero de filas:",salacine.shape[0],"\n")
print("Numero de columnas:",salacine.shape[1],"\n")
print("Nombres de las columnas: ",salacine.columns,"\n")
print("Numero de registros: ",salacine.size,"\n")
print(salacine.info())
salacine.head(3)

#Cantidad de categorias por columna
print("Cantidad de categorias por columna")
for i in range (salacine.shape[1]-1):
  print(salacine.columns.values[i]," : ",len(salacine.iloc[:,i].unique()))

#descripcion general de variables no numericas, variables numericas no se analizan porque son codigos
salacine.describe(include="all").iloc[:,[2,3,4,5,6,8,9,10,12,13,14,15,16]].iloc[0:4,:]

"""## SALAS DE EXPOSICIONES Y GALERIAS"""

#Caracteristicas globales del DataFrame
print("Numero de filas:",salaexpo.shape[0],"\n")
print("Numero de columnas:",salaexpo.shape[1],"\n")
print("Nombres de las columnas: ",salaexpo.columns,"\n")
print("Numero de registros: ",salaexpo.size,"\n")
print(salaexpo.info())
salaexpo.head(3)

#Cantidad de categorias por columna
print("Cantidad de categorias por columna")
for i in range (salaexpo.shape[1]-1):
  print(salaexpo.columns.values[i]," : ",len(salaexpo.iloc[:,i].unique()))

#descripcion general de variables no numericas, variables numericas no se analizan porque son codigos
salaexpo.describe(include="all").iloc[:,[2,3,4,5,6,8,9,10,12,13,14,15,16]].iloc[0:4,:]

"""## TEATROS Y AUDITORIOS"""

#Caracteristicas globales del DataFrame

print("Numero de filas:",teatro.shape[0],"\n")
print("Numero de columnas:",teatro.shape[1],"\n")
print("Nombres de las columnas: ",teatro.columns,"\n")
print("Numero de registros: ",teatro.size,"\n")
print(teatro.info())
teatro.head(3)

#Cantidad de categorias por columna
print("Cantidad de categorias por columna")
for i in range (teatro.shape[1]-1):
  print(teatro.columns.values[i]," : ",len(teatro.iloc[:,i].unique()))

#descripcion general de variables no numericas, variables numericas no se analizan porque son codigos
teatro.describe(include="all").iloc[:,[2,3,4,5,6,8,9,10,12,13,14,15,16]].iloc[0:4,:]

#nombres de localidades, se detecta una repetida, escrita diferente
teatro["LECNOMLOC"].unique()

"""#**TRATAMIENTO DE DATOS NULOS**

## RNT
"""

# ver que datos estan nulos en RAZON_SOCIAL_ESTABLECIMIENTO, para poder corregirlo, ya que son muy pocos y pueden ser errores, SOLO ESTA CATEGORIA TIENE NULOS.
print("Datos nulos de ", rnt.columns[6],": ",rnt.iloc[:,6].isnull().sum(),"\n")
print("Se verifica que son apartamentos particulares que se arriendan para turismo, no son datos erroneos o faltantes \n")
rnt[rnt.iloc[:,6].isnull()]

#se deciden remplazar valores nulos por la leyenda "NO TIENE"
rnt["RAZON_SOCIAL_ESTABLECIMIENTO"].fillna("NO TIENE", inplace=True)
print("Datos nulos de ", rnt.columns[6],": ",rnt.iloc[:,6].isnull().sum(),"\n")
rnt[rnt.iloc[:,6].str.contains("NO TIENE")]

"""#**TRANSFORMACIONES**

## RNT
"""

#CREAR COLUMNA CON MES EN NOMBRE
rnt["MES_N"]=rnt['MES'].dt.strftime('%B')
rnt.head(3)

"""## Areas Protegidas"""

#se remplazan comas por puntos, como separador decimal
arpro["SHAPE_AREA"]=arpro["SHAPE_AREA"].str.replace(",",".")
arpro["SHAPE_LEN"]=arpro["SHAPE_LEN"].str.replace(",",".")
arpro.head(3)

"""## Centros Culturales o Artisticos"""

#Se eliminan columnas que no aportan al analisis
centros=centros.drop(['LECCONTACTO', "LECESTADO","LECTELEFON","LECEMAIL","LECPAGWEB","LECANIO"], axis=1)
centros.head(3)

"""## Museos"""

#Se eliminan columnas que no aportan al analisis
museos=museos.drop(['LECPAGWEB', "LECEMAIL","LECCODSEC","LECNOMSEC","LECCONTACTO","LECANIO"], axis=1)
museos.head(3)

"""## Salas de cine y Cinematecas"""

#Se eliminan columnas que no aportan al analisis
salacine=salacine.drop(['LECPAGWEB', "LECEMAIL","LECCODSEC","LECNOMSEC","LECCONTACTO","LECANIO","LECTELEFON","LECCODUPZ","LECNOMUPZ","LECESTADO"], axis=1)
salacine.head(3)

"""## Salas de exposiciones y galerias"""

#Se eliminan columnas que no aportan al analisis
salaexpo=salaexpo.drop(['LECESTADO', "LECCONTACTO","LECANIO"], axis=1)
salaexpo.head(3)

"""## Teatros y Auditorios"""

#Se detecta una misma localidad escrita de 2 formas diferentes, se remplaza
teatro['LECNOMLOC']=teatro['LECNOMLOC'].replace(["USAQUÉN"],"USAQUEN")

teatro=teatro.drop(['LECESTADO', "LECCONTACTO"], axis=1)
teatro.head(3)

"""# **BODEGAS DE DATOS**

## RNT
"""

#Registros en el RNT por mes
rnt.groupby(["MES_N"])[["CODIGO_RNT"]].count().rename(columns={"CODIGO_RNT":"REGISTROS","MES_N":"MES"}).sort_values("REGISTROS",ascending=False).reset_index()

#Cantidad de registros por departamento
print("Cantidad de registros por Departamento \n ")
print("Tipo de retorno:",type(rnt.groupby(["DEPARTAMENTO"])[["CODIGO_RNT"]].count()))
rnt.groupby(["DEPARTAMENTO"])[["CODIGO_RNT"]].count().rename(columns={"CODIGO_RNT":"FRECUENCIA"}).reset_index()

#Se filtran solo los registros de Bogota, sitio de interes.
rnt_bog=rnt[rnt["DEPARTAMENTO"].str.contains("BOGOTA")]
rnt_bog.head(3)

#Numero de lugares en BOG, agrupados por categoria y sub_categoria
rnt_bog.groupby(["CATEGORIA","SUB_CATEGORIA"])[["CODIGO_RNT"]].count().reset_index().rename(columns={"CODIGO_RNT":"LUGARES"})

"""## Areas Portegidas"""

#numero de areas protegidas segun nombre
arpro1=arpro.groupby(["NOMBRE"])[["TIPO"]].count().rename(columns={"TIPO":"CANTIDAD"}).sort_values("CANTIDAD",ascending=False).reset_index()
arpro1

#Cantidad de areas protegidas en BOG por tipo
arpro.groupby(["TIPO"])[["NOMBRE"]].count().reset_index().rename(columns={"NOMBRE":"CANTIDAD"})

"""## Centros Culturales y Artisticos"""

#NUMERO DE CENTROS CULTURALES POR LOCALIDAD
centros.groupby(["LECCODLOC","LECNOMLOC"])[["LECCODIGO"]].count().reset_index().rename(columns={'LECCODLOC':'CODIGO_LOC',"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD"})

"""## Museos"""

#NUMERO DE MUSEOS POR  LOCALIDAD Y UPZ
museos.groupby(["LECCODLOC","LECNOMLOC","LECNOMUPZ"])[["LECCODIGO"]].count().reset_index().rename(columns={'LECCODLOC':'CODIGO_LOC',"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD","LECNOMUPZ":"UPZ"})

#ESTADO DE LOS MUSEOS POR LOCALIDAD
museos.groupby(["LECCODLOC","LECNOMLOC","LECESTADO"])[["LECCODIGO"]].count().reset_index().rename(columns={'LECCODLOC':'CODIGO_LOC',"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD","LECNOMUPZ":"UPZ","LECESTADO":"ESTADO"})

"""## Salas de Cine y Cinematecas"""

#TIPO DE CINEMA POR LOCALIDAD
salacine.groupby(["LECCODLOC","LECNOMLOC","LECCLASIF"])[["LECCODIGO"]].count().reset_index().rename(columns={'LECCODLOC':'CODIGO_LOC',"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD","LECCLASIF":"MARCA"})

#Cantidad de cinemas por tipo/marca
salacine.groupby(["LECCLASIF"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECCODIGO":"CANTIDAD","LECCLASIF":"MARCA"})

"""## Salas de exposiciones y Galerias"""

#TIPO DE SALAS POR UPZ
salaexpo.groupby(["LECNOMUPZ","LECCLASIF"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECCLASIF":"TIPO","LECNOMUPZ":"UPZ","LECESTADO":"ESTADO"})

"""## Teatros y Auditorios"""

#Cantidad de teatros y auditorios por localidad
teatro.groupby(["LECCODLOC","LECNOMLOC"])[["LECCODIGO"]].count().reset_index().rename(columns={'LECCODLOC':'CODIGO_LOC',"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD"})

"""## BASES GENERALES"""

#Base de datos unida de lugares en BOG, sin reservas naturales y el RNT
db_unida = pd.concat([salaexpo, salacine, centros,museos,teatro]) 
db_unida.head(10)

#CANTIDAD DE LUGARES DE INTERES TURISTICO POR LOCALIDAD EN BOGOTA DE MAYOR A MENOR
db_unida.groupby(["LECCODLOC","LECNOMLOC"])[["LECCODIGO"]].count().reset_index().rename(columns={'LECCODLOC':'CODIGO_LOC',"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD"}).sort_values(by='CANTIDAD', ascending=False)

"""#**ANALISIS DESCRIPTIVO**
Estas preguntas estan basadas en la bodega de datos.

### Pregunta 1
Se quiere saber el potencial turistico de Bogota representado en la oferta que hay de preStadores de servicios turisticos y sus categorias.
"""

#se genera el dataframe
rnt_cat=rnt_bog.groupby(["CATEGORIA"])[["CODIGO_RNT"]].count().reset_index().rename(columns={"CODIGO_RNT":"LUGARES"}).sort_values('LUGARES',ascending=False)
rnt_cat2=rnt_cat.copy()
#se modifica para hacerlo amigable al grafico
rnt_cat2["CATEGORIA"]=rnt_cat2["CATEGORIA"].replace({"ESTABLECIMIENTOS DE ALOJAMIENTO TURISTICO":"ALOJAMIENTO TURISTICO","ESTABLECIMIENTO DE GASTRONOMIA Y SIMILARES":"GASTRONOMIA Y SIMILARES","OPERADORES PROFESIONALES DE CONGRESOS FERIAS Y CONVENCIONES":"OPERADORES DE CONGRESOS FER Y CONVENCI","OFICINAS DE REPRESENTACION TURISTICA":"OF REPRESENTACION TURISTICA","OTROS TIPOS DE HOSPEDAJE TURISTICOS NO PERMANENTES":"HOSPEDAJE TURISTICOS TEMP",
                                                        "EMPRESA DE TRANSPORTE TERRESTRE AUTOMOTOR":"TRANSPORTE TERRESTRE AUTO","ARRENDADORES DE VEHICULOS PARA TURISMO NACIONAL E INTERNACIONAL":"ARRENDADORES DE VEHICULOS","EMPRESA DE TIEMPO COMPARTIDO Y MULTIPROPIEDAD":"TIEMPO COMPARTIDO","EMPRESAS CAPTADORAS DE AHORRO PARA VIAJES":"AHORRO PARA VIAJES","COMPANIA DE INTERCAMBIO VACACIONAL":"INTERCAMBIO VACACIONAL","CONCESIONARIOS DE SERVICIOS TURISTICOS EN PARQUE":"SERVICIOS TURISTICOS EN PARQUE",
                                                         "USUARIOS INDUSTRIALES DE SERVICIOS TURISTICOS EN ZONAS FRANCAS":"SERV TURISTICOS EN ZONAS FRANCAS","OPERADORES PROFESIONALES DE CONGRESOS FERIAS Y CONVENCIONES":"OPERADORES DE CONGRESOS"})
print("**Categorias de prestadores de Turismo en Bogota**")
rnt_cat2

# se crea la grafica
rnt_cat_fig = px.bar(rnt_cat2, x='CATEGORIA', y='LUGARES', title ='<b>Categorias de prestadores de Turismo en Bogotá<b>')
rnt_cat_fig.update_layout(
    xaxis_title = 'Categorias',
    yaxis_title = 'Cantidad',
    template = 'simple_white',
    title_x = 0.2)

rnt_cat_fig.show()
print("Podemos ver que la mayoria de las empresas dedicadas al turismo en al ciudad estan dedicadas a ser agencias de viaje y alojamientos, seguidos por los restaurantes y guias turisticos ")

"""### Pregunta 2
Se quiere saber con respecto a los departamentos con mas registros turisticos que puesto ocupa Bogotá, como ciudad capital.
"""

#creacion del dataset
rnt_dep=rnt.groupby(["DEPARTAMENTO"])[["CODIGO_RNT"]].count().rename(columns={"CODIGO_RNT":"FRECUENCIA"}).reset_index().sort_values('FRECUENCIA',ascending=False)
rnt_dep_f=rnt_dep[rnt_dep["FRECUENCIA"]>20000]
print("Departamentos con mayor numero de registros de empresas de turismo")
rnt_dep_f

# crear gráfica:
rnt_dep_fig = px.pie(rnt_dep_f , values = 'FRECUENCIA', names = 'DEPARTAMENTO', title = '<b>Departamentos con mayor numero de registros de empresas de turismo<b>')

# agregar detalles a la gráfica:
rnt_dep_fig.update_layout(
    template = 'ggplot2',
    legend_title = 'DEPARTAMENTOS',
    title_x = 0.5)

rnt_dep_fig.show()
print("Podemos ver que Bogota a pesar de tener una area territorial mucho menor que el  resto de departamentos ocupa el tercer lugar en registros de turismo con un 17,7% dentro de los 7 departamentos con mas registros")

"""### Pregunta 3
Bogota posee una gran riqueza natural y ecologica, ¿Que tipos de reservas naturales existen en la ciudad y cuantos de cada uno?.
"""

#creacion del dataframe
arpro_tipo=arpro.groupby(["TIPO"])[["NOMBRE"]].count().reset_index().rename(columns={"NOMBRE":"CANTIDAD"})
print("Areas protegidas en Bogotá")
#Se corrige error en una categoria
arpro_tipo["TIPO"]=arpro_tipo["TIPO"].replace("Parque Ecologico Distrital de Monta??a","Parque Ecologico Distrital de Montaña")
#se saca el total de areas protegicas
total_arpro=arpro["TIPO"].count()
arpro_tipo

# elaborar el grafico
arpro_tipo_fig = px.pie(arpro_tipo , values = 'CANTIDAD', names = 'TIPO', template = 'ggplot2',title = '<b>% Areas protegidas en Bogotá<b>',
             hole = .5)

# poner detalles a la gráfica
arpro_tipo_fig.update_layout(
    legend_title = 'Tipo de Areas Protegidas',
    title_x = 0.5,
    annotations = [dict(text = str(total_arpro), x=0.5, y = 0.5, font_size = 40, showarrow = False )])

arpro_tipo_fig.show()

"""### Pregunta 4
Quiero ir a Bogotá y explorar su oferta artistica y cultural,¿En que localidad existe mayor cantidad de centros culturales y artisticos?
"""

#Creacion del dataframe
centros_loc=centros.groupby(["LECNOMLOC"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD"}).sort_values('CANTIDAD',ascending=False)
print("Centros Culturales y Artisticos por Localidad")
centros_loc

# se crea la grafica
centros_loc_fig = px.bar(centros_loc, x='LOCALIDAD', y='CANTIDAD',template = 'ggplot2',title ='<b>Centros Culturales y Artisticos por Localidad<b>')
rnt_cat_fig.update_layout(
    xaxis_title = 'Localidad',
    yaxis_title = 'Cantidad',
    template = 'ggplot2',
    title_x = 0.2)

centros_loc_fig.show()
print("Podemos ver que la localidad de teusaquillo tiene la mayor cantidad de centros culturales y artisticos de la ciudad")

"""### Pregunta 5
Bogota tiene una gran variedad de museos, por localidad ¿cuantos podemos encontrar? y ¿en que estado se encuentran?
"""

#Creacion del dataset
museos_loc=museos.groupby(["LECNOMLOC","LECESTADO"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD","LECESTADO":"ESTADO"})
#se cambia un item que no aporta informacion
museos_loc["ESTADO"]=museos_loc["ESTADO"].replace("N.A","Sin Registro")
print("Museos por localidad y Estado")
museos_loc

# se crea la grafica
museos_loc_fig = px.bar(museos_loc, x='LOCALIDAD', y='CANTIDAD',template = 'ggplot2',color="ESTADO",barmode="stack",title ='<b>Museos por Localidad y Estado<b>')
rnt_cat_fig.update_layout(
    xaxis_title = 'Localidad',
    yaxis_title = 'Cantidad',
    title_x = 0.2)

museos_loc_fig.show()
print("Podemos ver que la mayoria de localidades tiene sus museos activos y muy pocos sin registro.")

"""### Pregunta 6
Queremos ir a cine, de los cinemas registrados,¿Cuantos pertenecen a una cadena de cine reconocida y cuantos son independientes?
"""

#Creacion del dataframe
salacine_tot=salacine.groupby(["LECCLASIF"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECCODIGO":"CANTIDAD","LECCLASIF":"MARCA"}).sort_values('CANTIDAD',ascending=False)
salacine_tot

# se crea la grafica
salacine_tot_fig = px.bar(salacine_tot, x='MARCA', y='CANTIDAD', title ='<b>Cines y Cinematecas por Marca<b>')
rnt_cat_fig.update_layout(
    xaxis_title = 'Marca',
    yaxis_title = 'Cantidad',
    template = 'plotly_dark',
    title_x = 0.2)

salacine_tot_fig.show()
print("Podemos ver que las marcas con solo un teatro se pueden catalogar como independientes y pertenecen a cine clubs y cinematecas")

"""### Pregunta 7
En que zona de Bogota podre encontrar mayor cantidad de Galerias de Arte o Salas de Exposiciones?
"""

#creando el dataframe
salaexpo_gen=salaexpo.groupby(["LECNOMUPZ","LECCLASIF"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECCLASIF":"TIPO","LECNOMUPZ":"ZONA-UPZ","LECCODIGO":"CANTIDAD"}).sort_values('CANTIDAD',ascending=False)
salaexpo_gen

# se crea la grafica
salaexpo_gen_fig = px.bar(salaexpo_gen, x='ZONA-UPZ', y='CANTIDAD',template = 'ggplot2',color="TIPO",barmode="stack",title ='<b>Salas de Exposicion y Galerias por zona<b>')
salaexpo_gen_fig.update_layout(
    xaxis_title = 'Zona-UPZ',
    yaxis_title = 'Cantidad',
    title_x = 0.2)

salaexpo_gen_fig.show()
print("En la zona de Chico-Lago se encuentra la mayor cantidad de galerias asi como de salas de exposición")

"""### Pregunta 8
Quiero encontrar una zona donde tenga varias opciones para poder realizar un evento para multiples personas.¿Que localidad o zona me recomienda?
"""

#Creando el dataframe
teatro_gen=teatro.groupby(["LECNOMLOC"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD"}).sort_values('CANTIDAD',ascending=False)
print("Teatros y Auditorios por localidad en Bogotá")
teatro_gen

# se crea la grafica
teatro_gen_fig = px.bar(teatro_gen, x='LOCALIDAD', y='CANTIDAD',template = 'ggplot2',title ='<b>Teatros y Auditorios por localidad en Bogotá<b>')
teatro_gen_fig.update_layout(
    xaxis_title = 'Localidad',
    yaxis_title = 'Cantidad',
    template = 'ggplot2',
    title_x = 0.2)

teatro_gen_fig.show()
print("La localidad de teusaquillo tiene mas auditorios y teatros, apropiados para eventos")

"""### Pregunta 9
Quiero encontrar un alojamiento desde el cual pueda acceder a multiples planes para disfrutar la ciudad, ¿En que localidad podre encontrar mayor cantidad de opciones turisticas?
"""

db_unida.head(5)

#creacion del dataframe
db_unida_loc=db_unida.groupby(["LECNOMLOC"])[["LECCODIGO"]].count().reset_index().rename(columns={"LECNOMLOC":"LOCALIDAD","LECCODIGO":"CANTIDAD"}).sort_values(by='CANTIDAD', ascending=False)
print("Opciones Turisticas por localidad")
db_unida_loc

# se crea la grafica
db_unida_loc_fig = px.bar(db_unida_loc, x='LOCALIDAD', y='CANTIDAD',template = 'plotly_dark',title ='<b>Opciones Turisticas por localidad<b>')
db_unida_loc_fig.update_layout(
    xaxis_title = 'Localidad',
    yaxis_title = 'Cantidad',
    template = 'plotly_dark',
    title_x = 0.2)

db_unida_loc_fig.show()
print("La localidad de teusaquillo se destaca por tener mas opciones turisticas que las otras localidades de la ciudad, seguido por Chapinero")

"""# NUEVA BASE DE DATOS: COMIDAS

Del analisis anterior se encuentra que ele studio deberia ser complementado con informacion de lugares de comida, restaurantes y cafes, asi que se procede a buscar una base de datos, depurarla y obtener informacion de la misma
"""

#se agrega nueva base de datos de comida
comidas = pd.read_csv('/content/drive/MyDrive/Bases de datos - Taller 2/comidas_bog.csv',encoding='latin-1',sep=",")
comidas.head()

#Renombrar columnas
comidas=comidas.rename(columns={"amenity":"Tipo","name":"Nombre","cuisine":"Especialidad"})

#depurar las especialidades
comidas["Especialidad"]=comidas["Especialidad"].replace({'friture':"Comidas Rapidas", 'coffee_shop':"Cafe", 'regional':"Regional", 'burger':"Comidas Rapidas", 'heladeria':"Helados",
       'bread':"Panaderia", 'ice_cream':"Helados", 'panaderia':"Panaderia", 'chinese':"Comida China",
       'coffee_shop;juice;sandwiches;beer':"Cafe Bar",
       'coffee_shop;sandwich;mexican;regional':"Mexicana", 'coffee;bakery;juice':"Cafe",
       'coffee_shop;regional':"Cafe", 'CafÃ©_de_orÃ\xadgen':"Cafe", 'international':"Internacional",
       'cafeteria':"Cafe", 'spanish':"Española", 'pasteleria':"Pasteleria", 'Chocolate_shop':"Cafe", 'donut':"Pasteleria",
       'sandwich; coffee_shop':"Cafe", 'Postres':"Pasteleria", 'kebab':"Arabe", 'Pan':"Panaderia",})
comidas["Especialidad"].unique()

#Filtrar algunas Especilaides
comidas["Especialidad"]=comidas["Especialidad"].fillna("Varios")
comidas.loc[comidas["Especialidad"].str.contains("coffee_shop"),"Especialidad"]="Cafe"

#cantidad de valores nulos antes de graficar mapa
comidas.isnull().sum()

# token de mapbox
token_map = "pk.eyJ1IjoidmxhZGlnb3NwZWwiLCJhIjoiY2w4dG44MGg5MDU5NzNvbzV6enIydXNsayJ9.qEL2CzwXjYhsrDroi9mi1w"
px.set_mapbox_access_token(token_map)

# generar mapa
px.scatter_mapbox(comidas, 
                  lat = 'latitude', lon = 'longitude', 
                  color ='Tipo',
                  hover_name = 'Tipo',
                  hover_data=["Nombre", "Especialidad"], 
                  mapbox_style  = 'streets',
                  color_continuous_scale = px.colors.cyclical.IceFire, size_max = 30, zoom = 10)
#referencia https://plotly.com/python/choropleth-maps/

#cantidad de lugares de comida por categoria en Bogota
comidas["Tipo"]=comidas["Tipo"].replace({"restaurant":"Restaurante","cafe":"Cafe","bar":"Bar"})
comidas["Tipo"].value_counts()

# crear dataset
comidas_tipo= comidas.groupby(['Tipo'])[['longitude']].count().reset_index().sort_values('Tipo', ascending = False).rename(columns={"longitude":"Cantidad"})
comidas_tipo

# crear gráfica
fig = px.bar(comidas_tipo, x='Tipo', y='Cantidad', title ='<b>Cantidad de Lugares de comida por Tipo en Bogotá<b>')

# agregar detalles a la gráfica
fig.update_layout(
    xaxis_title = 'Tipo de Establecimiento',
    yaxis_title = 'Cantidad',
    template = 'simple_white',
    title_x = 0.5,
    legend_title = '<b>Tipo<b>')

fig.show()